1.什么是微服务
	将整个项目拆分开，按业务
2.微服务为什么近几年发展起来，它基于什么去做
	docker
3.go和python怎么去应用微服务开发
	每个语言有对应的微服务框架

4.MySQL范式，1，2，3范式，为什么要用逆范式？
	1NF―――原子性，不可分割（关系型数据库都自动符合）
	2NF―――唯一性，在1NF基础上，设置主键（一条完全一样的数据不可能同时出现2次）
	3NF―――冗余性约束，在2NF基础上，设置外键
	逆范式：对于一些经常要用的数据，可以考虑冗余

5.一张表数据量特别大，效率低，怎么优化？
	表的水平拆分和垂直拆分
	垂直拆分，数据中有大文本数据，可以单切出去
	水平拆分，对于数据量大的单表，可以考虑拆成多个表

6.redis有没有事务，MySQL和redis的事务有什么区别？
	有
	redis是半事务，事务中如果没有语法错误，不影响其他正确语句执行

7.zookeeper
	框架
	分布式系统协调
	集群选主
	分布式事务
	负载均衡
	发布/订阅（例如master修改配置，发布数据，其他子节点可以订阅数据，全都更改）

8.工作流
	OA系统，处理复杂工作流程
	有很多框架可以实现，AirFlow

9.一条没有语法错误的600行的SQL怎么排错
	从里到外，按业务逻辑去排查

10.分布式CAP理论是什么？如何取舍
	C：强一致性：所有节点同一时间，数据完全一致
	A：可用性：服务一直可用，正常响应
	P：分区容错性：网络分区出问题，
	最多能符合其中2个，不可能全都符合
	mysql：CA，redis：CP，网站：AP

11.分布式数据库BASE理论是什么？核心思想是什么？
	基本可用
	软状态
	最终一致性
	思想：对系统数据一致性要求放低，换取系统整体伸缩性提高

12.Raft算法原理，有啥用
	同步（日志复制）
	选主（领导选举）
	安全
	
	节点有三种状态：
		跟随者
		候选者
		领导者

13.事务的ACID是什么？BASE与ACID的区别
	原子性，事务要么都发生，要么都不发生
	一致性，并发事务要保持一致
	隔离性，事务之间相互隔离
	持久性，数据持久化改变

	区别：ACID追求的是强一致性，BASE支持大型分布式系统，牺牲系统的一致性，提高系统高可用


14.数据库事务有哪3种并发问题，为了解决这3种问题，可以对应4个数据库隔离级别，是哪些
	脏读，事务读取到了临时无效的数据
	不可重复读，两次读取的持久数据不同
	幻读，读取一张表，两次数据不同

	四个隔离级别：
		读未提交，上面3种问题都会出现
		读已提交，排除了脏读
		可重复读，会出现幻读
		串行化，效率极其低下，避免了所有并发问题

15.MySQL默认事务并发隔离级别是什么
	默认是可重复度，其他大部分默认为读已提交，例如oracle

16.分布式和集群有啥区别，分布式应用场景有哪些
	集群理解为招多个厨师
	分布式理解为优化工作任务，有人专门负责炒菜

	分布式存储：Mysql，HDFS
	分布式缓存：redis，memcache
	分布式调度中心：zookeeper
	分布式消息队列：各种MQ，kafka
	分布式搜索：solr，es
	分布式容器：docker


17.Nginx与LVS的区别（软件级别），负载均衡还有硬件的，例如F5
	LVS是最高效的，LVS支持TCP/UDP负载均衡，在OSI网络4层转发
	负载度			LVS优于Nginx
	稳定度			LVS优于Nginx
	服务器性能要求		LVS优于Nginx
	功能多少		Nginx优于LVS
	适合用于大型网站的负载均衡

18.公司组织架构
	前端、后端、DBA（1，2）、需求（产品经理）、测试、运维
19.项目周期
	
20.碰到过哪些生产环境的问题？你们如何定位问题的？如何修复问题的？
	问题：项目上线后，地图显示特别慢
	定位：性能测试框架，对系统性能进行测试，发生不是后端，是前端加载问题
	修复：排查到具体问题点，是一个循环语句耗时高，是一个前端控件源码，修改了源码

21.思考面试中如何回答基础问题，如何回答项目问题
	基础问题：
		引开，我们项目中是怎么怎么用的，用来干嘛
	项目问题：
		带着纸和笔，画架构图

22.SQL语句怎么优化？写SQL语句的一些注意点
	https://blog.csdn.net/s1547823103/article/details/79205670

23.常用的设计模式有哪些，具体在什么场景用的
	

了解分布式理论(CAP和BASE)和分布式一致性算法（raft）



