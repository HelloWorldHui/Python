from pandas import Series
from pandas import DataFrame
================================================
Series的基本概念
可以把Series看成一个定长的有序字典

属性
可以通过shape，size，index,values等得到series的属性
s.shape
s.values
s.index
s.size

可以使用s.head(),tail()分别查看前n个和后n个值
s.head(1)
s.tail(1)
==========================================================
一 Series的创建
Series是一种类似与一维数组的对象，由下面两个部分组成：
- values：一组数据（ndarray类型）
- index：相关的数据索引标签

#(1) 使用列表创建Series
Series(data=[1,2,3,4,5])

#使用numpy创建Series
Series(data=np.random.random(size=(10,)),name='np') #name数组名(kenb)



(2) 由字典创建:不能在使用index.但是依然存在默认索引
注意：数据源必须为一维数据
dic = {
    'math':100,
    'English':99
}
s = Series(data=dic)
s

二 Series的索引和切片
可以使用中括号取单个索引（此时返回的是元素类型），或者中括号里<font color=red>一个列表</font>取多个索引（此时返回的是一个Series类型）。

(1) 显式索引：

    - 使用index中的元素作为索引值
    - 使用s.loc[]（推荐）:注意，loc中括号中放置的一定是显示索引

 注意，此时是闭区间
s.数学
s.loc['math']


(2) 隐式索引：

    - 使用整数作为索引值
    - 使用.iloc[]（推荐）:iloc中的中括号中必须放置隐式索引

 注意，此时是半开区间

s[1]
s.iloc[0:2]


对Series元素进行去重
s.unique()  #去重函数

当索引没有对应的值时，可能出现缺失数据显示NaN（not a number）的情况

---------------------------------------------------
s1 = Series([1,2,3,4,5],index=['a','b','c','d','e'])
s2 = Series([1,2,3,4,5],index=['a','b','c','f','e'])
s3 = s1+s2   #数据清洗
s3
a     2.0
b     4.0
c     6.0
d     NaN
e    10.0
f     NaN
dtype: float64
---------------------------------------------------
可以使用pd.isnull()，pd.notnull()，或s.isnull(),notnull()函数检测缺失数据
s3.isnull()
s3.notnull()

s1[[0,2,3]]
****************
s1[[True,True,False,True,False]]
s3[s3.notnull()]
****************

4）Series的运算
(1) + - * /

(2) add() sub() mul() div()  :  s1.add(s2,fill_value=0)

s1.add(s2)  #s1+s2

1. 想一想Series运算和ndarray运算的规则有什么不同？
 - series有显示索引 numpy没有显示,遵循广播机制
===============================================================

===============================================================
二 DataFrame
DataFrame属性：values、columns、index、shape

1）DataFrame的创建
最常用的方法是传递一个字典来创建。DataFrame以字典的键作为每一【列】的名称，以字典的值（一个数组）作为每一列。

此外，DataFrame会自动加上每一行的索引。

使用字典创建的DataFrame后，则columns参数将不可被使用。

同Series一样，若传入的列与字典的键不匹配，则相应的值为NaN。


DataFrame(data=np.random.randint(0,100,size=(3,3)),index=['a','b','c'],columns=['A','B','C'])

	A	B	C
---------------------------
a	57	15	58
b	91	3	55
c	5	22	74


dic = {
    'name':['tom','jay','bobo'],
    'salary':[10000,5000,6000]
}
DataFrame(data=dic,index=['one','two','three'])
	name	salary
one	tom	10000
two	jay	5000
three	bobo	6000

-----------------------------------------
dic = {
    '张三':[150,150,150,300],
    '李四':[0,0,0,0]
}
df = DataFrame(data=dic,index=['语文','数学','英语','理综'])
df
	张三	李四
语文	150	0
数学	150	0
英语	150	0
理综	300	0



(1) 对列进行索引

    - 通过类似字典的方式  df['q']
    - 通过属性的方式     df.q


 可以将DataFrame的列获取为一个Series。返回的Series拥有原DataFrame相同的索引，
     且name属性也已经设置好了，就是相应的列名

df['张三']
df.李四
#修改列索引
df.columns = ['zhangsan','lisi']

#获取前两列
df[['lisi','zhangsan']]

(2) 对行进行索引

    - 使用.loc[]加index来进行行索引
    - 使用.iloc[]加整数来进行行索引
    
 同样返回一个Series，index为原来的columns。
df.loc['数学']

df.iloc[1]
df.loc[['语文','英语']]
df.loc['理综','zhangsan']


【注意】
直接用中括号时：
- 索引表示的是列索引
- 切片表示的是行切片


df[0:2]   #切行


df.iloc[:,0:2]   #切列

#假设张三期中考试数学被发现作弊，要记为0分，如何实现？
df.iloc[1,0] = 0
df


#李四因为举报张三作弊立功，期中考试所有科目加100分，如何实现？
df['lisi'] = df['lisi'] + 100
df

# 所有加10分
df = df + 10
df






