


ORM的聚合分组查询


     聚合查询:  Book.objects.all().aggregate(c=AVG("price"))  #  {"c":456}
     分组查询:
               
               单表分组
                   select dep,AVG(salary) from emp group by dep
                   Emp.objects.values("dep").annotate(avg=AVG("salary"))
                   Emp.objects.values("provice").annotate(m=MAX("age"))   # queryset=][{"provice":"","m":""},{},{}]
                   
               跨表分组查询
                    
                   class Book
                       id   title  price pub_id
                        1    python  122   1
                        2    linux    34   1
                        3    go       34   2
                        
                   class Publish        
                       id    name
                        1    苹果出版社
                        2    橘子出版社

                     # 查询每一个出版社的名称以及出版的书籍的平均价格 
                    sql:
                        select * from book left join publish on publish.id=book.pub_id
                        
                        
                        join表:
                        
                          id   title  price   pub_id      id    name
                            1    python  122   1           1    苹果出版社
                            2    linux    34   1           1    苹果出版社
                            3    go       34   2           2    橘子出版社
                            
                        select publish.name,AVG(price) from book left join publish on publish.id=book.pub_id
                                                                 group by publish.id,publish.name
                                                                 
                                                                 
                     orm:
                        
                         Publish.objects.values("id").annotate(avg=AVG("book__price")) # [{"id":"1","avg":"321"},{"id":"2","avg":"121"}]            
                         Book.objects.values("pub_id").annotate(avg=AVG("price"))      # [{"id":"1","avg":"321"},{"id":"2","avg":"121"}]                        
                         Publish.objects.values("id","name").annotate(avg=AVG("book__price")) # [{"id":"1","avg":"321"},{"id":"2","avg":"121"}]
                         Publish.objects.all().annotate(avg=AVG("book__price")).values("name","avg") # [pub1,pub2]

                                                  
                    KEY: ORM引擎先连表,再group by,最后显示字段!
                         
                                             
                        
    F 与 Q



今天:Ajax


     客户端浏览器给服务器发请求的形式:
         
        1 地址栏输入url 回车  默认是get请求方式
        2 form表单,用户点击submit按钮  
                    --- get
                    --- post
        3 超链接标签(a标签)    默认是get请求方式
        
        4 Ajax请求
               ---get
               ---post
               
            (1) 异步
            (2) 局部刷新
            
            python:
                json.dumps()
                json.loads()
            JS:
                JSON.stringfy([])   --------  json字符串                 
                JSON.stringfy({})   --------  json字符串                 
                JSON.stringfy('')   --------  json字符串   

                JSON.parse(json字符串)  ----> JS数据类型(数组,对象)              
               
        
        总结(KEY):
            1  客户端浏览器通过执行一段JS代码向服务器发送请求,服务器路由对应的视图函数返回一个json字符串作为响应,
               浏览器接受响应后会触发该ajax请求的回调函数success,参数为响应字符串,success内通过DOM操作讲结果反映到页面上,
               实现局部刷新，不再向之前的请求会将响应覆盖整个页面上。
               
            2   ajax请求不要返回render，redirect这些响应，就返回json字符串的HttpResponse！


    文件上传
        form表单
            
            
            
        Ajax
        
        
    针对POST请求:    
    contentType:
          浏览器                                                           服务器
          ''
         请求首行 
          ...                          ----------------------------->
         contentType:"json"
         请求体 # user=alex&pwd=123  
                # {"user":"alex","pwd":"123"}
          
          ''
          
          
          
          Django:
                if urlencoded:
                       request.POST={request.body}
                else:
                       request.POST={}  

        如何向服务器发送json数据:
            
             $(".ajax_btn2").click(function () {
                $.ajax({
                    url:"/put1/",
                    type:"post",
                    contentType:"json",
                    data:JSON.stringify({
                        a:1,
                        b:2
                    }),
                    success:function (res) {
                        console.log(res)
                    }
                })    

            def put1(request):
                print(request.POST)
                print(request.body)

                import json
                data=json.loads(request.body.decode())
                print(data,type(data))
                return HttpResponse("OK")                
                      
          

作业1：在bms基于Ajax实现登录认证
作业2：基于ajax进行删除
    













                
                  
                   