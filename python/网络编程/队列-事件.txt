进程之间的通信流程 队列 管道 数据共享也算

from mutiprocessing import Queue #队列  ***
方法
q = Queue(3)

q.put('x')
q.get()
q.empty()#判断是否为空
q.get_nowait() 拿到空 报错
q.put_nowait()
q.qsize()返回队列中的正确数量
q.full()判断是否满了

先进先出
其他方法
q.close() 关闭队列

===========================

from multiprocessing import Event    #了解

e = Event() #2个状态 True False 默认False
print(e.is_set()) 查看当前状态
e.set() 将事件改为True
e.clear() 改为False
e.wait() falase 一直等待 
=========================
管道     了解
from multiprocessing import Pipe

from multiprocessing import Process, Pipe

def f(conn):
    conn.send("Hello 妹妹") #子进程发送了消息
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe() #建立管道，拿到管道的两端，双工通信方式，两端都可以收发消息
    p = Process(target=f, args=(child_conn,)) #将管道的一段给子进程
    p.start() #开启子进程
    print(parent_conn.recv()) #主进程接受了消息
    p.join()




=========================================
    了解
数据共享


from multiprocessing import Manager,Process,Lock
def work(d,lock):
    with lock: #不加锁而操作共享的数据,肯定会出现数据错乱
        d['count']-=1

if __name__ == '__main__':
    lock=Lock()
    with Manager() as m:
        dic=m.dict({'count':100})
        p_l=[]
        for i in range(100):
            p=Process(target=work,args=(dic,lock))
            p_l.append(p)
            p.start()
        for p in p_l:
            p.join()
        print(dic)